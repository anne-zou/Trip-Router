/* This program is free software: you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public License
   as published by the Free Software Foundation, either version 3 of
   the License, or (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>. 
 */

package com.example.anne.otp_android_client_v3.model.OTPPlanModel;

/**
 * Represents one instruction in walking directions. Three examples from New York City:
 * <p>
 * Turn onto Broadway from W 57th St (coming from 7th Ave): <br/>
 * distance = 100 (say) <br/>
 * walkDirection = RIGHT <br/>
 * streetName = Broadway <br/>
 * everything else null/false <br/>
 * </p>
 * <p>
 * Now, turn from Broadway onto Central Park S via Columbus Circle <br/>
 * distance = 200 (say) <br/>
 * walkDirection = CIRCLE_COUNTERCLOCKWISE <br/>
 * streetName = Central Park S <br/>
 * exit = 1 (first exit) <br/>
 * immediately everything else false <br/>
 * </p>
 * <p>
 * Instead, go through the circle to continue on Broadway <br/>
 * distance = 100 (say) <br/>
 * walkDirection = CIRCLE_COUNTERCLOCKWISE <br/>
 * streetName = Broadway <br/>
 * exit = 3 <br/>
 * stayOn = true <br/>
 * everything else false <br/>
 * </p>
 * */
public class WalkStep {

    /**
     * The distance in meters that this step takes.
     */
    private double distance = 0;

    /**
     * The relative direction of this step.
     */
    private RelativeDirection relativeDirection;

    /**
     * The name of the street.
     */
    private String streetName;

    /**
     * The absolute direction of this step.
     */
    private AbsoluteDirection absoluteDirection;

    /**
     * When exiting a highway or traffic circle, the exit name/number.
     */

    private String exit;

    /**
     * Indicates whether or not a street changes direction at an intersection.
     */
    private Boolean stayOn = false;

    /**
     * This step is on an open area, such as a plaza or train platform, and thus the directions should say something like "cross"
     */
    private Boolean area = false;

    /**
     * The name of this street was generated by the system, so we should only display it once, and generally just display right/left directions
     */
    private Boolean bogusName = false;

    /**
     * The longitude of start of the step
     */
    private double lon;

    /**
     * The latitude of start of the step
     */
    private double lat;

    /**
     * The elevation profile as a comma-separated list of x,y values. x is the distance from the start of the step, y is the elevation at this
     * distance.
     */
    //TODO Implement this
//    public List<P2<Double>> elevation;

    //TODO Implement this
//    public List<LocalizedAlert> alerts;

    private transient double angle;

    /**
     * The walkStep's mode; only populated if this is the first step of that mode in the leg.
     * Used only in generating the streetEdges array in StreetSegment; not serialized. 
     */
    private transient String newMode;

    /**
     * The street edges that make up this walkStep.
     * Used only in generating the streetEdges array in StreetSegment; not serialized. 
     */
    //TODO Implement this
//    public transient List<Edge> edges = Lists.newArrayList();

    /**
     * The bike rental on/off station info.
     * Used only in generating the streetEdges array in StreetSegment; not serialized. 
     */
    private transient BikeRentalStationInfo bikeRentalOnStation, bikeRentalOffStation;


    public WalkStep() {
    }


    public double getDistance() {
        return distance;
    }

    public void setDistance(double distance) {
        this.distance = distance;
    }

    public RelativeDirection getRelativeDirection() {
        return relativeDirection;
    }

    public void setRelativeDirection(RelativeDirection relativeDirection) {
        this.relativeDirection = relativeDirection;
    }

    public String getStreetName() {
        return streetName;
    }

    public void setStreetName(String streetName) {
        this.streetName = streetName;
    }

    public AbsoluteDirection getAbsoluteDirection() {
        return absoluteDirection;
    }

    public void setAbsoluteDirection(AbsoluteDirection absoluteDirection) {
        this.absoluteDirection = absoluteDirection;
    }

    public String getExit() {
        return exit;
    }

    public void setExit(String exit) {
        this.exit = exit;
    }

    public Boolean getStayOn() {
        return stayOn;
    }

    public void setStayOn(Boolean stayOn) {
        this.stayOn = stayOn;
    }

    public Boolean getArea() {
        return area;
    }

    public void setArea(Boolean area) {
        this.area = area;
    }

    public Boolean getBogusName() {
        return bogusName;
    }

    public void setBogusName(Boolean bogusName) {
        this.bogusName = bogusName;
    }

    public double getLon() {
        return lon;
    }

    public void setLon(double lon) {
        this.lon = lon;
    }

    public double getLat() {
        return lat;
    }

    public void setLat(double lat) {
        this.lat = lat;
    }

    public double getAngle() {
        return angle;
    }

    public void setAngle(double angle) {
        this.angle = angle;
    }

    public String getNewMode() {
        return newMode;
    }

    public void setNewMode(String newMode) {
        this.newMode = newMode;
    }

    public BikeRentalStationInfo getBikeRentalOnStation() {
        return bikeRentalOnStation;
    }

    public void setBikeRentalOnStation(BikeRentalStationInfo bikeRentalOnStation) {
        this.bikeRentalOnStation = bikeRentalOnStation;
    }

    public BikeRentalStationInfo getBikeRentalOffStation() {
        return bikeRentalOffStation;
    }

    public void setBikeRentalOffStation(BikeRentalStationInfo bikeRentalOffStation) {
        this.bikeRentalOffStation = bikeRentalOffStation;
    }

    @Override
    public String toString() {
        String direction = absoluteDirection.toString();
        if (relativeDirection != null) {
            direction = relativeDirection.toString();
        }
        return "WalkStep(" + direction + " on " + streetName + " for " + distance + ")";
    }


}
